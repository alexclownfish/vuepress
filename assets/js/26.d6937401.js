(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{563:function(e,t,a){"use strict";a.r(t);var s=a(8),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"k8s集群-传统服务器集群自定义监控node-exporter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s集群-传统服务器集群自定义监控node-exporter"}},[e._v("#")]),e._v(" k8s集群+传统服务器集群自定义监控node-exporter")]),e._v(" "),a("h3",{attrs:{id:"由于我的项目是在两套环境上运行-k8s集群-传统服务器集群所以记录下在传统服务器集群自定义监控node-exporter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#由于我的项目是在两套环境上运行-k8s集群-传统服务器集群所以记录下在传统服务器集群自定义监控node-exporter"}},[e._v("#")]),e._v(" 由于我的项目是在两套环境上运行：k8s集群+传统服务器集群所以记录下在传统服务器集群自定义监控node-exporter")]),e._v(" "),a("h2",{attrs:{id:"prometheus监控平台配置node-exporter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prometheus监控平台配置node-exporter"}},[e._v("#")]),e._v(" Prometheus监控平台配置node_exporter")]),e._v(" "),a("p",[e._v("源码包上边有直接下载解压")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("tar -xvf node_exporter-*.linux-amd64.tar.gz -C /usr/local/\n\nmv node_exporter-0.18.1.linux-amd64/ node_exporter\n")])])]),a("p",[e._v("可以修改默认端口")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("vim node_exporter    #查找9100，然后重启node_exporter\n")])])]),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/63449830/131477090-1af86328-42db-4fe1-8046-19b88fea680f.png",alt:"image"}})]),e._v(" "),a("p",[e._v("将node_exporter设置为系统服务开机自启")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('cat > /etc/systemd/system/node_exporter.service << "EOF"\n[Unit]\nDescription=node_export\nDocumentation=https://github.com/prometheus/node_exporter\n\n[Service]\nExecStart=/usr/local/node_exporter/node_exporter\nExecStart=                                                                                                   #新加参数的前一行需要添加占位\nExecStart=/usr/local/node_exporter/node_exporter --collector.textfile.directory=/usr/local/node_exporter/key #如果不做自定义监控不是node_exporter添加系统服务可以不加此行\nRestart=on-failure\n[Install]\nWantedBy=multi-user.target\nEOF\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("systemctl daemon-reload\n\nsystemctl enable node_exporter\n\nsystemctl start node_exporter\n\nsystemctl status node_exporter\n\n[root@pro-zab-test3 key]# lsof -i:9100\nCOMMAND     PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nnode_expo 11798 root    3u  IPv6  87556      0t0  TCP *:jetdirect (LISTEN)\n")])])]),a("p",[e._v("http://ip:9100/metrics访问\n"),a("img",{attrs:{src:"https://user-images.githubusercontent.com/63449830/131452612-7e2c0f9f-12f8-40b3-bb4b-0a025b4bf912.png",alt:"image"}})]),e._v(" "),a("h3",{attrs:{id:"prometheus配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prometheus配置"}},[e._v("#")]),e._v(" prometheus配置")]),e._v(" "),a("p",[e._v("传统方式 安装的prometheus打开prometheus.yml\n如果是按照我之前的在k8s中部署的prometheus 打开prometheus-configmap.yaml")]),e._v(" "),a("p",[e._v("进行添加 | 修改")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    - job_name: linux-node\n      static_configs:\n      - targets:\n        - 172.22.254.87:9100   #node_exporter主机\n        - 172.22.254.86:9100   #node_exporter主机\n")])])]),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/63449830/131453250-1c2f92f8-676b-4b9c-8517-cbe16d078f63.png",alt:"image"}})]),e._v(" "),a("p",[e._v("传统方式直接重启prometheus即可\nk8s方式 kubectl apply -f prometheus-configmap.yaml 更新configmap配置文件到prometheus ，再热更新使配置文件生效 curl -X POST http://10.1.230.219:9090/-/reload")]),e._v(" "),a("h2",{attrs:{id:"在传统服务器上自定义node-exporter监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在传统服务器上自定义node-exporter监控"}},[e._v("#")]),e._v(" 在传统服务器上自定义node_exporter监控")]),e._v(" "),a("p",[e._v("首先创建目录key目录")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cd /usr/local/node_exporter/ && mkdir key\n")])])]),a("p",[e._v("创建监控程序或服务脚本key.sh，我这里做了案例，其他程序或者服务思路一致")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('#!/bin/bash\n#node_exporter_status_scripts\nstatus=`systemctl status node_exporter | grep "Active" | awk \'{print $2}\'`\n\nif [ $status=="active" ]\nthen\n  echo "node_exporter_status 0"\nelse\n  echo "node_exporter_status 1"\nfi\n#alertgo_status_scripts\n\nalertgostatus=`lsof -i:8088`\n\nif [ "$?" = 0 ]\nthen\n  echo "alertgo_status 0"\nelse\n  echo "alertgo_status 1"\nfi\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("chmod +x key.sh\n")])])]),a("p",[e._v("配置计划任务")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("vim /etc/crontab\n\n* * * * * root bash /usr/local/node_exporter/key/key.sh > /usr/local/node_exporter/key/key.prom\n")])])]),a("p",[e._v("由于新加了自定义监控配置项，所以需要把自定义配置项的保存目录告诉node_exporter，我们的node_exporter使用以系统服务来启动的，所以需要在node_exporter中加入以下内容,在部署上边node_exporter中有提到")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ExecStart=\nExecStart=/usr/local/node_exporter/node_exporter --collector.textfile.directory=/usr/local/node_exporter/key\n")])])]),a("p",[e._v("到此就结束了，如果配置正确，重启一下node_exporter再次刷新页面可以看到\n根据服务的启停可以看到")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@pro-zab-test3 key]# cat key.prom \nnode_exporter_status 0\nalertgo_status 0\n")])])]),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/63449830/131454926-7867fc50-39dc-4400-8ff2-8ba50f53676c.png",alt:"image"}}),e._v(" "),a("img",{attrs:{src:"https://user-images.githubusercontent.com/63449830/131454973-58e207b7-ed3e-4656-b0b4-10a8461fdec9.png",alt:"image"}})]),e._v(" "),a("p",[e._v("在prometheus 中也可以用promSql进行查询制表")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/63449830/131455274-c1b0f06e-7e08-44d5-a704-d6ea5e1e63d0.png",alt:"image"}}),e._v(" "),a("img",{attrs:{src:"https://user-images.githubusercontent.com/63449830/131455393-02746554-1623-4859-9431-1ec41eec78f1.png",alt:"image"}})]),e._v(" "),a("h2",{attrs:{id:"模拟故障"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模拟故障"}},[e._v("#")]),e._v(" 模拟故障")]),e._v(" "),a("p",[e._v("在prometheus-rules.yaml中添加rules规则，传统部署正常添加即可，我这里用k8s方式示例")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('linux-node.rules: |\n    groups:\n    - name: linux-node.rules\n      rules:\n      - alert: alertgoDone\n        expr: |\n           alertgo_status==1\n        for: 1m\n        labels:\n          severity: warning\n        annotations:\n          summary: "{{ $labels.instance }}: alertgo is lost\\n  VALUE = {{ $value }}\\n  LABELS = {{ $labels }}"\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" kubectl apply -f prometheus-rules.yaml 更新configmap配置文件到prometheus ，再热更新使配置文件生效 curl -X POST http://10.1.230.219:9090/-/reload \n")])])]),a("p",[e._v("我这里alertgo是go开发的二进制，我直接杀掉进程即可模拟\n查询进程号")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@pro-zab-test3 key]# lsof -i:8088\nCOMMAND     PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nalertGoV6 11984 root    3u  IPv6  89542      0t0  TCP *:radan-http (LISTEN)\n\n[root@pro-zab-test3 key]# cat key.prom \nnode_exporter_status 0\nalertgo_status 0\n\n")])])]),a("p",[e._v("杀死进程")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kill 11984\n")])])]),a("p",[e._v("再次查看key.prom，发现value为1")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@pro-zab-test3 key]# cat key.prom \nnode_exporter_status 0\nalertgo_status 1\n")])])]),a("p",[e._v("查看prometheus alerts\n"),a("img",{attrs:{src:"https://user-images.githubusercontent.com/63449830/131457282-95826395-4ba1-4099-af1f-1ab3b950765d.jpg",alt:"1630393080(1)"}}),e._v("\n钉钉已报警")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/63449830/131457342-d5bedbf5-f806-4c37-a142-976e5548ab30.jpg",alt:"1630393114(1)"}})]),e._v(" "),a("h1",{attrs:{id:"grafana部分后续更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grafana部分后续更新"}},[e._v("#")]),e._v(" grafana部分后续更新")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/63449830/131606618-3ce8813b-b25c-43f2-8cff-f5b13cfda4ce.jpg",alt:"1630466573"}})]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/63449830/131606624-71149d88-455d-466d-9f66-174461770359.jpg",alt:"1630466575(1)"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);