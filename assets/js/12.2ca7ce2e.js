(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{567:function(n,e,_){"use strict";_.r(e);var t=_(8),r=Object(t.a)({},(function(){var n=this,e=n.$createElement,_=n._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[_("h1",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言:")]),n._v(" "),_("p",[n._v("代理服务可简单的分为正向代理和反向代理:")]),n._v(" "),_("p",[n._v("正向代理: 用于代理内部网络对Internet的连接请求(如VPN/NAT),客户端指定代理服务器,并将本来要直接发送给目标Web服务器的HTTP请求先发送到代理服务器上,然后由代理服务器去访问Web服务器"),n._v(", 并将Web服务器的Response回传给客户端:")]),n._v(" "),_("p",[n._v("反向代理: 与正向代理相反,如果局域网向Internet提供资源,并让Internet上的其他用户可以访问局域网内资源, 也可以设置一个代理服务器, 它提供的服务就是反向代理. 反向代理服务器接受来自Internet的连接,然后将请求转发给内部网络上的服务器,并将Response回传给Internet上请求连接的客户端:")]),n._v(" "),_("h2",{attrs:{id:"一、nginx反向代理-web服务器的调度器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、nginx反向代理-web服务器的调度器"}},[n._v("#")]),n._v(" 一、Nginx反向代理=Web服务器的调度器：")]),n._v(" "),_("p",[n._v("（1.）反向代理（Reverse Proxy）方式是指以代理服务器来接受客户端的连接请求，然后将请求转发给网络上的web服务器（可能是apache、nginx、tomcat、iis等），并将从web服务器上得到的结果返回给请求连接的客户端，此时代理服务器对外就表现为一个服务器。")]),n._v(" "),_("p",[n._v("从上图可以看出：反向代理服务器代理网站Web服务器接收Http请求，对请求进行转发。而且nginx作为反向代理服务器可以根据用户请求的内容把请求转发给后端不同的web服务器，例如静动分离，再例如在nginx上创建多个虚拟主机，这样就成功的做到了在浏览器中输入不同域名（url）的时候访问后端的不同web服务器或web群集。")]),n._v(" "),_("p",[n._v("（2.）反向代理的作用")]),n._v(" "),_("ul",[_("li",[n._v("保护网站安全：任何来自Internet的请求都必须先经过代理服务器；")]),n._v(" "),_("li",[n._v("通过配置缓存功能加速Web请求：可以缓存真实Web服务器上的某些静态资源，减轻真实Web服务器的负载压力；")]),n._v(" "),_("li",[n._v("实现负载均衡：充当负载均衡服务器均衡地分发请求，平衡集群中各个服务器的负载压力；")])]),n._v(" "),_("h2",{attrs:{id:"二、什么是nginx"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、什么是nginx"}},[n._v("#")]),n._v(" 二、什么是nginx")]),n._v(" "),_("h3",{attrs:{id:"nginx简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#nginx简介"}},[n._v("#")]),n._v(" nginx简介")]),n._v(" "),_("p",[n._v("Nginx是一款轻量级的网页服务器、反向代理器以及电子邮件代理服务器。因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。Nginx（发音同engine x），它是由俄罗斯程序员Igor Sysoev所开发的。起初是供俄国大型的门户网站及搜索引擎Rambler（俄语：Рамблер）使用。此软件BSD-like协议下发行，可以在UNIX、GNU/Linux、BSD、Mac OS X、Solaris，以及Microsoft Windows等操作系统中运行。")]),n._v(" "),_("p",[n._v("Nginx的应用现状：")]),n._v(" "),_("p",[n._v("Nginx 已经在俄罗斯最大的门户网站── Rambler Media（www.rambler.ru）上运行，同时俄罗斯超过20%的虚拟主机平台采用Nginx作为反向代理服务器。")]),n._v(" "),_("p",[n._v("在国内，已经有淘宝、新浪博客、新浪播客、网易新闻、六间房、56.com、Discuz!、水木社区、豆瓣、YUPOO、海内、迅雷在线等多家网站使用 Nginx 作为Web服务器或反向代理服务器。")]),n._v(" "),_("h3",{attrs:{id:"nginx的核心特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#nginx的核心特点"}},[n._v("#")]),n._v(" Nginx的核心特点")]),n._v(" "),_("ul",[_("li",[_("p",[n._v("跨平台：Nginx 可以在大多数OS编译运行，而且也有Windows的版本；")])]),n._v(" "),_("li",[_("p",[n._v("配置异常简单：非常容易上手。")])]),n._v(" "),_("li",[_("p",[n._v("非阻塞、高并发连接：官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数。（这得益于Nginx使用了最新的epoll模型）；")])])]),n._v(" "),_("p",[n._v("注意：")]),n._v(" "),_("p",[n._v("对于一个Web服务器来说，首先看一个请求的基本过程：建立连接—接收数据—发送数据，在系统底层看来：上述过程（建立连接—接收数据—发送数据）在系统底层就是读写事件。")]),n._v(" "),_("p",[n._v("如果采用阻塞调用的方式，当读写事件没有准备好时，那么就只能等待，当前线程被挂起，等事件准备好了，才能进行读写事件。")]),n._v(" "),_("p",[n._v("如果采用非阻塞调用的方式：事件马上返回，告诉你事件还没准备好呢，过会再来吧。过一会，再来检查一下事件，直到事件准备好了为止，在这期间，你就可以先去做其它事情，然后再来看看事件好了没。虽然不阻塞了，但你得不时地过来检查一下事件的状态，你可以做更多的事情了，但带来的开销也是不小的。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程")]),n._v(" "),_("ul",[_("li",[n._v("事件驱动：通信机制采用epoll模型，支持更大的并发连接。")])]),n._v(" "),_("p",[n._v("非阻塞通过不断检查事件的状态来判断是否进行读写操作，这样带来的开销很大，因此就有了异步非阻塞的事件处理机制。这种机制让你可以同时监控多个事件，调用他们是非阻塞的，但可以设置超时时间，在超时时间之内，如果有事件准备好了，就返回。这种机制解决了上面阻塞调用与非阻塞调用的两个问题。")]),n._v(" "),_("p",[n._v("以epoll模型为例：当事件没有准备好时，就放入epoll(队列)里面。如果有事件准备好了，那么就去处理；当事件没有准备好时，才在 epoll里面等着。这样，我们就可以并发处理大量的并发了，当然，这里的并发请求，是指未处理完的请求。线程只有一个，所以同时能处理的请求当然只有一个了，只是在请求之间进行不断地切换而已，切换也是因为异步事件未准备好，而主动让出的。这里的切换是没有任何代价，你可以理解为循环处理多个准备好的事件。")]),n._v(" "),_("p",[n._v("多线程方式相比，这种事件处理方式是有很大的优势的，不需要创建线程，每个请求占用的内存也很少，没有上下文切换，事件处理非常的轻量级，并发数再多也不会导致无谓的资源浪费（上下文切换）。对于apache服务器，每个请求会独占一个工作线程，当并发数上到几千时，就同时有几千的线程在处理请求了。这对操作系统来说，是个不小的挑战：因为线程带来的内存占用非常大，线程的上下文切换带来的cpu开销很大，自然性能就上不去，从而导致在高并发场景下性能下降严重。")]),n._v(" "),_("p",[n._v("总结：通过异步非阻塞的事件处理机制，Nginx实现由进程循环处理多个准备好的事件，从而实现高并发和轻量级。")]),n._v(" "),_("ul",[_("li",[n._v("Master/Worker结构：一个master进程，生成一个或多个worker进程。注意：\nMaster-Worker设计模式主要包含两个主要组件Master和Worker，Master维护着Worker队列，将请求下发到多个Worker并行执行，Worker主要进行实际逻辑计算，并将结果返回给Master。")])]),n._v(" "),_("p",[n._v("nginx采用这种进程模型有什么好处？采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，Master 进程则很快重新启动新的Worker进程。当然，Worker进程的异常退出，肯定是程序有bug了，异常退出，会导致当前Worker上的所有请求失败，不过不会影响到所有work请求，所以降低了风险。")]),n._v(" "),_("ul",[_("li",[_("p",[n._v("内存消耗小：处理大并发的请求内存消耗非常小。在3万并发连接下，开启的10个Nginx 进程才消耗150M内存（15M*10=150M）。")])]),n._v(" "),_("li",[_("p",[n._v("内置的健康检查功能：如果 Nginx 代理的后端的某台 Web 服务器宕机了，不会影响前端访问。")])]),n._v(" "),_("li",[_("p",[n._v("节省带宽：支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头。")])]),n._v(" "),_("li",[_("p",[n._v("稳定性高：用于反向代理，宕机的概率微乎其微。")])])]),n._v(" "),_("h2",{attrs:{id:"三、nginx-反向代理-apache构建web服务器集群的负载均衡"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、nginx-反向代理-apache构建web服务器集群的负载均衡"}},[n._v("#")]),n._v(" 三、Nginx（反向代理）+apache构建Web服务器集群的负载均衡")]),n._v(" "),_("p",[n._v("nginx配置反向代理")]),n._v(" "),_("p",[n._v("配置nginx作为反向代理和负载均衡，同时利用其缓存功能，将静态页面放在nginx上缓存，以达到降低后端服务器连接数的目的并检查后端web服务器的健康状况。")]),n._v(" "),_("h3",{attrs:{id:"环境搭建"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[n._v("#")]),n._v(" 环境搭建")]),n._v(" "),_("p",[n._v("环境：")]),n._v(" "),_("p",[n._v("OS:centos7.2")]),n._v(" "),_("p",[n._v("nginx：192.168.197.169")]),n._v(" "),_("p",[n._v("apache1:192.168.197.167")]),n._v(" "),_("p",[n._v("apache2:192.168.197.168")]),n._v(" "),_("p",[n._v("（1.）安装zlib-devel、pcre-devel等Nginx相关依赖包以及gcc编译环境")]),n._v(" "),_("p",[n._v("yum -y install gcc gcc-c++ make libtool zlib zlib-devel pcre pcre-devel openssl openssl-devel")]),n._v(" "),_("p",[n._v("注意：")]),n._v(" "),_("p",[n._v("结合proxy和upstream模块实现后端web负载均衡")]),n._v(" "),_("p",[n._v("使用proxy模块实现静态文件缓存")]),n._v(" "),_("p",[n._v("结合nginx默认自带的 ngx_http_proxy_module 模块 和ngx_http_upstream_module模块实现后端服务器的健康检查，也可以使用第三方模块nginx_upstream_check_module")]),n._v(" "),_("p",[n._v("使用nginx-sticky-module扩展模块实现Cookie会话黏贴（保持会话）")]),n._v(" "),_("p",[n._v("使用ngx_cache_purge实现更强大的缓存清除功能")]),n._v(" "),_("p",[n._v("上面提到的2个模块都属于第三方扩展模块，需要提前下好源码，然后编译时通过--add-moudle=src_path一起安装。")]),n._v(" "),_("p",[n._v("（2.）创建Nginx用户和组，并且把用户加入到组里不让用户在控制台登录")]),n._v(" "),_("p",[n._v("[root@kang ~]# groupadd www\n[root@kang ~]# useradd -g www www -s /sbin/nologin\n（3.）编译安装Nginx\n可以到官网去下载最新版本Nginx：http://nginx.org/download/nginx-1.13.8.tar.gz")]),n._v(" "),_("p",[n._v("本章使用的是nginx-1.10.2.tar.gz版本来演示：")]),n._v(" "),_("p",[n._v("#tar zxf nginx-1.10.2.tar.gz")]),n._v(" "),_("p",[n._v("#tar zxf ngx_cache_purge-2.3.tar.gz")]),n._v(" "),_("p",[n._v("#tar zxf master.tar.gz")]),n._v(" "),_("p",[n._v("[root@kang ~]# tar zxf nginx-1.10.2.tar.gz\n[root@kang ~]# tar zxf ngx_cache_purge-2.3.tar.gz\n[root@kang ~]# tar zxf master.tar.gz\n[root@kang ~]# cd nginx-1.10.2/\n[root@kang nginx-1.10.2]#")]),n._v(" "),_("p",[n._v("注意：nginx的所有模块必须在编译的时候添加，不能再运行的时候动态加载。\n[root@kang nginx-1.10.2]#  ./configure --prefix=/usr/local/nginx1.10 --user=www --group=www --with-http_stub_status_module --with-http_realip_module --with-http_ssl_module --with-http_gzip_static_module --http-client-body-temp-path=/var/tmp/nginx/client --http-proxy-temp-path=/var/tmp/nginx/proxy --http-fastcgi-temp-path=/var/tmp/nginx/fcgi --with-pcre --add-module=../ngx_cache_purge-2.3 --with-http_flv_module  --add-module=../nginx-goodies-nginx-sticky-module-ng-08a395c66e42")]),n._v(" "),_("p",[n._v("[root@kang nginx-1.10.2]# make && make install")]),n._v(" "),_("p",[n._v("注意：nginx的所有模块必须在编译的时候添加，不能再运行的时候动态加载。")]),n._v(" "),_("p",[n._v("（4.）优化nginx程序的执行路径")]),n._v(" "),_("p",[n._v("[root@kang nginx-1.10.2]# ln -s /usr/local/nginx1.10/sbin/nginx /usr/local/sbin/\n（5.）检测Nginx服务是否有错误\n[root@kang nginx-1.10.2]# nginx -t\n发现报如下错误信息：")]),n._v(" "),_("p",[n._v("（6.）那是因为没有那个指定的目录，所以接下来创建指定的目录，并设置相关操作权限")]),n._v(" "),_("p",[n._v("[root@kang nginx-1.10.2]# mkdir -p /var/tmp/nginx/client\n[root@kang nginx-1.10.2]# chown -R www:www /var/tmp/nginx/\n（7.）再次测试执行\nnginx -t")]),n._v(" "),_("p",[n._v("2.编写Nginx服务脚本")]),n._v(" "),_("h3",{attrs:{id:"编写nginx服务脚本"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#编写nginx服务脚本"}},[n._v("#")]),n._v(" 编写Nginx服务脚本")]),n._v(" "),_("p",[n._v('[root@kang ~]# vi /etc/init.d/nginx\n内容如下：\n#!/bin/bash\n#chkconfig: 2345 99 20\n#description: Nginx Service Control Script\nPROG="/usr/local/nginx1.10/sbin/nginx"\nPIDF="/usr/local/nginx1.10/logs/nginx.pid"\ncase "$1" in\nstart)\nnetstat -anplt |grep ":80" &> /dev/null && pgrep "nginx" &> /dev/null\nif [ $? -eq 0 ]\nthen\necho "Nginx service already running."\nelse\n$PROG -t &> /dev/null\nif [ $? -eq 0 ] ; then\n$PROG\necho "Nginx service start success."\nelse\n$PROG -t\nfi\nfi\n;;\nstop)\nnetstat -anplt |grep ":80" &> /dev/null && pgrep "nginx" &> /dev/null\nif [ $? -eq 0 ]\nthen\nkill -s QUIT $(cat $PIDF)\necho "Nginx service stop success."\nelse\necho "Nginx service already stop"\nfi\n;;\nrestart)\n$0 stop\n$0 start\n;;\nstatus)\nnetstat -anplt |grep ":80" &> /dev/null && pgrep "nginx" &> /dev/null\nif [ $? -eq 0 ]\nthen\necho "Nginx service is running."\nelse\necho "Nginx is stop."\nfi\n;;\nreload)\nnetstat -anplt |grep ":80" &> /dev/null && pgrep "nginx" &> /dev/null\nif [ $? -eq 0 ]\nthen\n$PROG -t &> /dev/null\nif [ $? -eq 0 ] ; then\nkill -s HUP $(cat $PIDF)\necho "reload Nginx config success."\nelse\n$PROG -t\nfi\nelse\necho "Nginx service is not run."\nfi\n;;\n*)\necho "Usage: $0 {start|stop|restart|reload}"\nexit 1\nesac')]),n._v(" "),_("p",[n._v("（2.）给脚本添加可执行权限，以及设置服务开机自启动")]),n._v(" "),_("p",[n._v("[root@kang ~]# chmod +x /etc/init.d/nginx\n[root@kang ~]# chkconfig --add nginx\n[root@kang ~]# chkconfig nginx on\n（3.）启动Nginx服务，查看端口")]),n._v(" "),_("p",[n._v("（4.）访问Nginx网站测试")]),n._v(" "),_("p",[n._v("注意：关闭防火墙或者放行80端口：")]),n._v(" "),_("p",[n._v("[root@kang ~]# firewall-cmd --permanent --add-port=80/tcp\nsuccess\n[root@kang ~]# firewall-cmd  --reload\nsuccess\n[root@kang ~]#")]),n._v(" "),_("p",[n._v("注意：如果你想在已安装好的nginx上添加第三方模块，依然需要重新编译，但为了不覆盖你原有的配置，请不要make install，而是直接拷贝可执行文件：")]),n._v(" "),_("p",[n._v("[root@kang ~]# nginx -V")]),n._v(" "),_("p",[n._v("[root@www nginx-1.10.2]#./configure  --add-module=……   #你的第三方模块\n[root@www nginx-1.10.2] #make后不要make install,改为手动拷贝，先备份\n[root@www nginx-1.10.2] #cp /usr/local/nginx1.10/sbin/nginx /usr/local/nginx1.10/sbin/nginx.bak\n[root@www nginx-1.10.2] #cp objs/nginx /usr/local/nginx1.10/sbin/nginx")]),n._v(" "),_("h2",{attrs:{id:"相关模块功能详解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#相关模块功能详解"}},[n._v("#")]),n._v(" 相关模块功能详解")]),n._v(" "),_("p",[n._v("（1.）查看Nginx加载的模块")]),n._v(" "),_("p",[n._v("注意：nginx的所有模块必须在编译的时候添加，不能再运行的时候动态加载。")]),n._v(" "),_("p",[n._v("（2.）nginx-sticky-module模块：\n到同一个后端服务器上处理，这样一定程度上可以解决多个backend servers的session同步的问题 —— 因为不再需要同步，而RR轮询模式必须要运维人员自己考虑session同步的实现。\n这个模块的作用是通过cookie黏贴的方式将来自同一个客户端（浏览器）的请求发送")]),n._v(" "),_("p",[n._v("另外内置的 ip_hash 也可以实现根据客户端IP来分发请求，但它很容易造成负载不均衡的情况，而如果nginx前面有CDN网络或者来自同一局域网的访问，它接收的客户端IP是一样的，容易造成负载不均衡现象。nginx-sticky-module的cookie过期时间，默认浏览器关闭就过期。")]),n._v(" "),_("p",[n._v("这个模块并不合适不支持 Cookie 或手动禁用了cookie的浏览器，此时默认sticky就会切换成RR。它不能与ip_hash同时使用。")]),n._v(" "),_("p",[n._v("例如：\nupstream backend {\nserver 192.168.31.141:80 weight=1;\nserver 192.168.31.250:80 weight=1;\nsticky; 重点模块\n}\n配置起来超级简单，一般来说一个sticky指令就够了。")]),n._v(" "),_("p",[n._v("相关信息可以查看官方文档https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng")]),n._v(" "),_("p",[n._v("（3.）load-balance其它调度方案：")]),n._v(" "),_("p",[n._v("这里顺带介绍一下nginx的负载均衡模块支持的其它调度算法：")]),n._v(" "),_("p",[n._v("轮询（默认） ：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。Weight 指定轮询权值，Weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。")]),n._v(" "),_("p",[n._v("ip_hash ： 每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。当然如果这个节点不可用了，会发到下个节点，而此时没有session同步的话就注销掉了。")]),n._v(" "),_("p",[n._v("least_conn ：请求被发送到当前活跃连接最少的realserver上。会考虑weight的值。")]),n._v(" "),_("p",[n._v("url_hash ： 此方法按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包 nginx_upstream_hash 。")]),n._v(" "),_("p",[n._v("fair ：这是比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的 upstream_fair 模块。")]),n._v(" "),_("p",[n._v("（4.）负载均衡与健康检查：")]),n._v(" "),_("p",[n._v("严格来说，nginx自带是没有针对负载均衡后端节点的健康检查的，但是可以通过默认自带的 ngx_http_proxy_module 模块和ngx_http_upstream_module 模块中的相关指令来完成当后端节点出现故障时，自动切换到下一个节点来提供访问。")]),n._v(" "),_("p",[n._v("例如：")]),n._v(" "),_("p",[n._v("upstream backend {\nsticky;\nserver 192.168.31.141:80 weight=1 max_fails=2 fail_timeout=10s;\nserver 192.168.31.250:80 weight=1 max_fails=2 fail_timeout=10s;\n}\nserver {\n……\nlocation / {\nproxy_pass http://backend;\n}\n……\n}\nweight ： 轮询权值也是可以用在ip_hash的，默认值为1")]),n._v(" "),_("p",[n._v("max_fails ： 允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream模块定义的错误。")]),n._v(" "),_("p",[n._v("fail_timeout ： 有两层含义，一是在10s 时间内最多容许2 次失败；二是在经历了 2 次失败以后，10s时间内不分配请求到这台服务器。")]),n._v(" "),_("p",[n._v("（5.）nginx的proxy缓存使用：")]),n._v(" "),_("p",[n._v("缓存也就是将js、css、image等静态文件从后端服务器缓存到nginx指定的缓存目录下，既可以减轻后端服务器负担，也可以加快访问速度，但这样缓存及时清理成为了一个问题，所以需要 ngx_cache_purge 这个模块来在过期时间未到之前，手动清理缓存。")]),n._v(" "),_("p",[n._v("proxy模块中常用的指令时proxy_pass和proxy_cache.")]),n._v(" "),_("p",[n._v("nginx的web缓存功能的主要是由proxy_cache、fastcgi_cache指令集和相关指令集完成，proxy_cache指令负责反向代理缓存后端服务器的静态内容，fastcgi_cache主要用来处理FastCGI动态进程缓存。")]),n._v(" "),_("p",[n._v("例如：")]),n._v(" "),_("p",[n._v('http {\n#$upstream_cache_status记录缓存命中率\nlog_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n\'$status $body_bytes_sent "$http_referer" \'\n\'"$http_user_agent" "$http_x_forwarded_for"\'\n\'"$upstream_cache_status"\';\naccess_log  logs/access.log  main;\nproxy_buffering on;   #代理的时候，开启或关闭缓冲后端服务器的响应\nproxy_temp_path /usr/local/nginx1.10/proxy_temp;\nproxy_cache_path /usr/local/nginx1.10/proxy_cache levels=1:2 keys_zone=my-cache:100m  inactive=600m max_size=2g;\nserver {\nlisten       80;\nserver_name  localhost;\nroot   html;\nindex  index.php index.html index.htm;\n#ngx_cache_purge实现缓存清除\nlocation  ~/purge(/.'),_("em",[n._v(") {\nallow 127.0.0.1;\nallow 192.168.31.0/24;\ndeny all;\nproxy_cache_purge my-cache $host$1$is_args$args;\n}\nlocation ~ .")]),n._v(".(gif|jpg|png|html|htm|css|js|ico|swf|pdf)(.*) {\nproxy_pass  http://backend;\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_ignore_headers Set-Cookie;\nproxy_hide_header Set-Cookie;\nproxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\nproxy_cache my-cache;\nadd_header Nginx-Cache $upstream_cache_status;\nproxy_cache_valid 200 304 301 302 8h;\nproxy_cache_valid 404 1m;\nproxy_cache_valid any 1d;\nproxy_cache_key $host$uri$is_args$args;\nexpires 30d;\n}\n相关选项说明：")]),n._v(" "),_("p",[n._v("proxy_buffering on; 代理的时候，开启或关闭缓冲后端服务器的响应。")]),n._v(" "),_("p",[n._v("当开启缓冲时，nginx尽可能快地从被代理的服务器接收响应，再将它存入缓冲区中。")]),n._v(" "),_("p",[n._v("proxy_temp_path ： 缓存临时目录。后端的响应并不直接返回客户端，而是先写到一个临时文件中，然后被rename一下当做缓存放在 proxy_cache_path 。0.8.9版本以后允许temp和cache两个目录在不同文件系统上（分区），然而为了减少性能损失还是建议把它们设成一个文件系统上。")]),n._v(" "),_("p",[n._v("proxy_cache_path： 设置缓存目录，目录里的文件名是cache_key 的MD5值。")]),n._v(" "),_("p",[n._v("levels=1:2 keys_zone=my-cache:100m表示采用2级目录结构，第一层目录只有一个字符，是由levels=1:2设置，总共二层目录，子目录名字由二个字符组成。Web缓存区名称为my-cache，内存缓存空间大小为100MB，这个缓冲zone可以被多次使用。文件系统上看到的缓存文件名类似于 /usr/local/nginx1.10/proxy_cache/c/29/b7f54b2df7773722d382f4809d65029c。")]),n._v(" "),_("p",[n._v("inactive=600 max_size=2g表示600分钟没有被访问的内容自动清除，硬盘最大缓存空间为2GB，超过这个大学将清除最近最少使用的数据。")]),n._v(" "),_("p",[n._v("需要在默认情况，nginx不缓存从后端响应的http头中带有Set-Cookie的对象。如果客户端发送的请求带有Cookie header，varnish将忽略缓存，直接将请求传递到后端。nginx中通过proxy_ignore_headers设置忽略它们，设置方法如下：")]),n._v(" "),_("p",[n._v("解决办法：")]),n._v(" "),_("p",[n._v("proxy_ignore_headers Set-Cookie;")]),n._v(" "),_("p",[n._v("proxy_hide_header Set-Cookie;\nproxy_cache ： 引用前面定义的缓存区 my-cache")]),n._v(" "),_("p",[n._v("proxy_cache_key ：定义如何生成缓存的键，设置web缓存的key值，nginx根据key值md5哈希存储缓存")]),n._v(" "),_("p",[n._v("proxy_cache_valid ： 为不同的响应状态码设置不同的缓存时间，比如200、302等正常结果可以缓存的时间长点，而404、500等缓存时间设置短一些，这个时间到了文件就会过期，而不论是否刚被访问过。")]),n._v(" "),_("p",[n._v("add_header指令来设置response header,语法: add_header name value;")]),n._v(" "),_("p",[n._v("$upstream_cache_status这个变量来显示缓存的状态，我们可以在配置中添加一个http头来显示这一状态，")]),n._v(" "),_("p",[n._v("$upstream_cache_status包含以下几种状态：")]),n._v(" "),_("p",[n._v("·MISS 未命中，请求被传送到后端\n·HIT 缓存命中\n·EXPIRED 缓存已经过期请求被传送到后端\n·UPDATING 正在更新缓存，将使用旧的应答\n·STALE 后端将得到过期的应答")]),n._v(" "),_("p",[n._v("expires ： 在响应头里设置Expires:或Cache-Control:max-age，返回给客户端的浏览器缓存失效时间。")]),n._v(" "),_("h2",{attrs:{id:"四、配置nginx反向代理-反向代理-负载均衡-健康探测"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、配置nginx反向代理-反向代理-负载均衡-健康探测"}},[n._v("#")]),n._v(" 四、配置nginx反向代理：反向代理+负载均衡+健康探测")]),n._v(" "),_("p",[n._v("（1.）下面的Nginx.conf实现nginx在前端做反向代理服务器的完整配置文件的例子，处理js、png等静态文件，jsp/php等动态请求转发到其它服务器tomcat/apache")]),n._v(" "),_("p",[n._v('例如：\nuser  www www;\nworker_processes  4;\nworker_cpu_affinity 0001 0010 0100 1000;\nerror_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\nworker_rlimit_nofile 10240;\npid        logs/nginx.pid;\nevents {\nuse epoll;\nworker_connections  4096;\n}\nhttp {\ninclude       mime.types;\ndefault_type  application/octet-stream;\nlog_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n\'$status $body_bytes_sent "$http_referer" \'\n\'"$http_user_agent" "$http_x_forwarded_for"\'\n\'"$upstream_cache_status"\';\naccess_log  logs/access.log  main;\nserver_tokens off;\nsendfile        on;\n#tcp_nopush     on;\n#keepalive_timeout  0;\nkeepalive_timeout  65;\n#Compression Settings\ngzip on;\ngzip_comp_level 6;\ngzip_http_version 1.1;\ngzip_proxied any;\ngzip_min_length 1k;\ngzip_buffers 16 8k;\ngzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\ngzip_vary on;\n#end gzip\n# http_proxy Settings\nclient_max_body_size   10m;\nclient_body_buffer_size   128k;\nproxy_connect_timeout   75;\nproxy_send_timeout   75;\nproxy_read_timeout   75;\nproxy_buffer_size   4k;\nproxy_buffers   4 32k;\nproxy_busy_buffers_size   64k;\nproxy_temp_file_write_size  64k;\nproxy_buffering on;\nproxy_temp_path /usr/local/nginx1.10/proxy_temp;\nproxy_cache_path /usr/local/nginx1.10/proxy_cache levels=1:2 keys_zone=my-cache:100m max_size=1000m inactive=600m max_size=2g;\n#load balance Settings\nupstream backend {\nsticky;\nserver 192.168.31.141:80 weight=1 max_fails=2 fail_timeout=10s;\nserver 192.168.31.250:80 weight=1 max_fails=2 fail_timeout=10s;\n}\n#virtual host Settings\nserver {\nlisten       80;\nserver_name  localhost;\ncharset utf-8;\nlocation  ~/purge(/.'),_("em",[n._v(") {\nallow 127.0.0.1;\nallow 192.168.31.0/24;\ndeny all;\nproxy_cache_purge my-cache $host$1$is_args$args;\n}\nlocation / {\nindex  index.php index.html index.htm;\nproxy_pass        http://backend;\nproxy_redirect off;\nproxy_set_header  Host  $host;\nproxy_set_header  X-Real-IP  $remote_addr;\nproxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\nproxy_ignore_headers Set-Cookie;\nproxy_hide_header Set-Cookie;\nproxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n}\nlocation ~ .")]),n._v(".(gif|jpg|png|html|htm|css|js|ico|swf|pdf)(.*) {\nproxy_pass  http://backend;\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\nproxy_cache my-cache;\nadd_header Nginx-Cache $upstream_cache_status;\nproxy_cache_valid 200 304 301 302 8h;\nproxy_cache_valid 404 1m;\nproxy_cache_valid any 1d;\nproxy_cache_key $host$uri$is_args$args;\nexpires 30d;\n}\nlocation /nginx_status {\nstub_status on;\naccess_log off;\nallow 192.168.31.0/24;\ndeny all;\n}\n}\n}")]),n._v(" "),_("p",[n._v("（2.）配置Nginx\n[root@kang ~]# vim  /usr/local/nginx1.10/conf/nginx.conf")]),n._v(" "),_("h3",{attrs:{id:"常用指令说明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用指令说明"}},[n._v("#")]),n._v(" 常用指令说明:")]),n._v(" "),_("p",[n._v("main全局配置:")]),n._v(" "),_("p",[n._v("woker_processes 4\n在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。")]),n._v(" "),_("p",[n._v("worker_cpu_affinity\n也是写在main部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如worker_cpu_affinity 0001 0010 0100 1000; （四核）。")]),n._v(" "),_("p",[n._v("附：")]),n._v(" "),_("p",[n._v("CPU工作状况：（输入 top 后，按1 查看）")]),n._v(" "),_("p",[n._v("‘\n上面的配置表示：1核CPU，开启1个进程。0001表示开启第一个cpu内核， 0010表示开启第二个cpu内核，依次类推；有多少个核，就有几位数，1表示该内核开启，0表示该内核关闭。")]),n._v(" "),_("p",[n._v("例如：")]),n._v(" "),_("p",[n._v("2核CPU，开启2个进程")]),n._v(" "),_("p",[n._v("worker_processes  2;")]),n._v(" "),_("p",[n._v("worker_cpu_affinity 01 10;\n2核CPU，开启4进程")]),n._v(" "),_("p",[n._v("worker_processes 4;\nworker_cpu_affinity 01 10 01 10;\n2核CPU，开启8进程")]),n._v(" "),_("p",[n._v("worker_processes  8;\nworker_cpu_affinity 01 10 01 10 01 10 01 10;\n8核CPU，开启2进程")]),n._v(" "),_("p",[n._v("worker_processes  2;\nworker_cpu_affinity 10101010  01010101;\n说明：10101010表示开启了第2,4,6,8内核，01010101表示开始了1,3,5,7内核")]),n._v(" "),_("p",[n._v("通过 apache 的ab测试查看nginx对CPU的使用状况：")]),n._v(" "),_("p",[n._v("如果多个CPU内核的利用率都相差不多，证明nginx己经成功的利用了多核CPU。测试结束后，CPU内核的负载应该都同时降低。")]),n._v(" "),_("p",[n._v("worker_connections 4096\n写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。\nworker_rlimit_nofile 10240\n写在main部分。worker进程的最大打开文件数限制。默认是没有设置，如果没设置的话，这个值为操作系统的限制(ulimit -n)。可以限制为操作系统最大的限制65535。把这个值设高，这样nginx就不会有“too many open files”问题了。")]),n._v(" "),_("p",[n._v("use epoll")]),n._v(" "),_("p",[n._v("写在events部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。")]),n._v(" "),_("p",[n._v("http服务器:\n与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。")]),n._v(" "),_("p",[n._v("sendfile on\n开启高效文件传输模式。")]),n._v(" "),_("p",[n._v("keepalive_timeout 65 :")]),n._v(" "),_("p",[n._v("长连接超时时间，单位是秒，长连接请求大量小文件的时候，可以减少重建连接的开销，如果设置时间过长，用户又多，长时间保持连接会占用大量资源。")]),n._v(" "),_("p",[n._v("client_max_body_size 10m\n允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值")]),n._v(" "),_("p",[n._v("client_body_buffer_size 128k\n缓冲区代理缓冲用户端请求的最大字节数")]),n._v(" "),_("p",[n._v("server_tokens off;\n隐藏nginx的版本号")]),n._v(" "),_("p",[n._v("模块http_proxy：\n这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能")]),n._v(" "),_("p",[n._v("proxy_connect_timeout 60\nnginx跟后端服务器连接超时时间(代理连接超时)")]),n._v(" "),_("p",[n._v("proxy_read_timeout 60")]),n._v(" "),_("p",[n._v("定义从后端服务器读取响应的超时。此超时是指相邻两次读操作之间的最长时间间隔，而不是整个响应传输完成的最长时间。如果后端服务器在超时时间段内没有传输任何数据，连接将被关闭。")]),n._v(" "),_("p",[n._v("定义向后端服务器传输请求的超时。此超时是指相邻两次写操作之间的最长时间间隔，而不是整个请求传输完成的最长时间。如果后端服务器在超时时间段内没有接收到任何数据，连接将被关闭。")]),n._v(" "),_("p",[n._v("proxy_buffer_size 4k\n设置缓冲区的大小为size。nginx从被代理的服务器读取响应时，使用该缓冲区保存响应的开始部分。这部分通常包含着一个小小的响应头。该缓冲区大小默认等于proxy_buffers指令设置的一块缓冲区的大小，但它也可以被设置得更小。")]),n._v(" "),_("p",[n._v("proxy_buffers 8 4k\n语法: proxy_buffers the_number is_size;\n为每个连接设置缓冲区的数量为number，每块缓冲区的大小为size。这些缓冲区用于保存从被代理的服务器读取的响应。每块缓冲区默认等于一个内存页的大小。这个值是4K还是8K，取决于平台。")]),n._v(" "),_("p",[n._v("附：查看Linux内存页大小")]),n._v(" "),_("p",[n._v("[root@kang ~]# getconf PAGESIZE\n4096\n[root@kang ~]#")]),n._v(" "),_("p",[n._v("或者\ngetconf PAGE_SIZE\nproxy_busy_buffers_size 64k")]),n._v(" "),_("p",[n._v("高负荷下缓冲大小（默认大小是proxy_buffers指令设置单块缓冲大小的2倍）")]),n._v(" "),_("p",[n._v("proxy_max_temp_file_size")]),n._v(" "),_("p",[n._v("当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M。")]),n._v(" "),_("p",[n._v("proxy_temp_file_write_size 64k")]),n._v(" "),_("p",[n._v("当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。")]),n._v(" "),_("p",[n._v("模块http_gzip：")]),n._v(" "),_("p",[n._v("gzip on : 开启gzip压缩输出，减少网络传输。")]),n._v(" "),_("p",[n._v("gzip_min_length 1k ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。建议设置成大于1k的字节数，小于1k可能会越压越大。")]),n._v(" "),_("p",[n._v("gzip_buffers 4 16k ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。416k代表以16k为单位，按照原始数据大小以16k为单位的4倍申请内存。如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果")]),n._v(" "),_("p",[n._v("gzip_http_version 1.1 ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.1，故请设置为 1.1。")]),n._v(" "),_("p",[n._v("gzip_comp_level 6 ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)")]),n._v(" "),_("p",[n._v("gzip_types ：匹配mime类型进行压缩，无论是否指定”text/html”类型总是会被压缩的。")]),n._v(" "),_("p",[n._v("默认值: gzip_types text/html (默认不对js/css文件进行压缩)\n#压缩类型，匹配MIME类型进行压缩\n#不能用通配符 text/*\n#(无论是否指定)text/html默认已经压缩\n#设置哪压缩种文本文件可参考 conf/mime.types")]),n._v(" "),_("p",[n._v("gzip_proxied any ： Nginx作为反向代理的时候启用，根据某些请求和应答来决定是否在对代理请求的应答启用gzip压缩，是否压缩取决于请求头中的“Via”字段，指令中可以同时指定多个不同的参数，意义如下：")]),n._v(" "),_("p",[n._v("off – 关闭所有的代理结果数据的压缩\nexpired – 启用压缩，如果header头中包含 “Expires” 头信息\nno-cache – 启用压缩，如果header头中包含 “Cache-Control:no-cache” 头信息\nno-store – 启用压缩，如果header头中包含 “Cache-Control:no-store” 头信息\nprivate – 启用压缩，如果header头中包含 “Cache-Control:private” 头信息\nno_last_modified – 启用压缩,如果header头中不包含 “Last-Modified” 头信息\nno_etag – 启用压缩 ,如果header头中不包含 “ETag” 头信息\nauth – 启用压缩 , 如果header头中包含 “Authorization” 头信息\nany – 无条件启用压缩")]),n._v(" "),_("p",[n._v("gzip_vary on ：和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩")]),n._v(" "),_("p",[n._v("模块http_stream：\n这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。")]),n._v(" "),_("p",[n._v("Location:")]),n._v(" "),_("p",[n._v("root /var/www/html")]),n._v(" "),_("p",[n._v("定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。")]),n._v(" "),_("p",[n._v("index index.jsp index.html index.htm")]),n._v(" "),_("p",[n._v("定义路径下默认访问的文件名，一般跟着root放")]),n._v(" "),_("p",[n._v("proxy_pass http:/backend")]),n._v(" "),_("p",[n._v("请求转向backend定义的服务器列表，即反向代理，对应upstream负载均衡器。也可以proxy_pass http://ip:port。")]),n._v(" "),_("p",[n._v("proxy_redirectoff;")]),n._v(" "),_("p",[n._v("指定是否修改被代理服务器返回的响应头中的location头域跟refresh头域数值")]),n._v(" "),_("p",[n._v("例如：")]),n._v(" "),_("p",[n._v("设置后端服务器“Location”响应头和“Refresh”响应头的替换文本。假设后端服务器返回的响应头是 “Location: http://localhost:8000/two/some/uri/”，那么指令")]),n._v(" "),_("p",[n._v("proxy_redirecthttp://localhost:8000/two/ http://frontend/one/;")]),n._v(" "),_("p",[n._v("将把字符串改写为 “Location: http://frontend/one/some/uri/”。")]),n._v(" "),_("p",[n._v("proxy_set_header Host$host;")]),n._v(" "),_("p",[n._v("允许重新定义或者添加发往后端服务器的请求头。")]),n._v(" "),_("p",[n._v("Host的含义是表明请求的主机名，nginx反向代理服务器会向后端真实服务器发送请求，并且请求头中的host字段重写为proxy_pass指令设置的服务器。因为nginx作为反向代理使用，而如果后端真实的服务器设置有类似防盗链或者根据http请求头中的host字段来进行路由或判断功能的话，如果反向代理层的nginx不重写请求头中的host字段，将会导致请求失败。")]),n._v(" "),_("p",[n._v("proxy_set_headerX-Forwarded-For $proxy_add_x_forwarded_for;")]),n._v(" "),_("p",[n._v("后端的Web服务器可以通过X-Forwarded-For获取用户真实IP")]),n._v(" "),_("p",[n._v("X_Forward_For字段表示该条http请求是有谁发起的？如果反向代理服务器不重写该请求头的话，那么后端真实服务器在处理时会认为所有的请求都来自反向代理服务器，如果后端有防攻击策略的话，那么机器就被封掉了。因此，在配置用作反向代理的nginx中一般会增加两条配置，修改http的请求头：\nproxy_set_header Host $host;\nproxy_set_header X-Forward-For $remote_addr;")]),n._v(" "),_("p",[n._v("proxy_next_upstream error timeoutinvalid_header http_500 http_502 http_503 http_504;")]),n._v(" "),_("p",[n._v("增加故障转移，如果后端的服务器返回502、504、执行超时等错误，自动将请求转发到upstream负载均衡池中的另一台服务器，实现故障转移。")]),n._v(" "),_("p",[n._v("proxy_set_headerX-Real-IP $remote_addr;")]),n._v(" "),_("p",[n._v("web服务器端获得用户的真实ip但是，实际上要获得用户的真实ip，也可以通过X-Forward-For")]),n._v(" "),_("h2",{attrs:{id:"五、验证-nginx反向代理的缓存功能、负载均衡及健康检查"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、验证-nginx反向代理的缓存功能、负载均衡及健康检查"}},[n._v("#")]),n._v(" 五、验证：nginx反向代理的缓存功能、负载均衡及健康检查")]),n._v(" "),_("p",[n._v("（1.）下面我们来测试一下缓存功能")]),n._v(" "),_("p",[n._v("如果在缓存时间之内需要更新被缓存的静态文件怎么办呢，这时候就需要手动来清除缓存了。")]),n._v(" "),_("p",[n._v("ngx_cache_pure清除缓存模块使用说明")]),n._v(" "),_("p",[n._v("用谷歌浏览器测试的时候，可以按F12调用开发工具，选择Network选项，我们可以看到，Response Headers，在这里我们可以看到，我们请求的是否缓存")]),n._v(" "),_("p",[n._v("从图中我们可以看到，我们访问的服务器是192.168.197.169，缓存命中。")]),n._v(" "),_("p",[n._v("也可以查看缓存目录或nginx的访问日志")]),n._v(" "),_("p",[n._v("清除缓存:")]),n._v(" "),_("p",[n._v("上述配置的proxy_cache_purge指令用于方便的清除缓存，但必须按照第三方的 ngx_cache_purge 模块才能使用")]),n._v(" "),_("p",[n._v("使用 ngx_cache_purge 模块清除缓存（直接删除缓存目录下的文件也算一种办法）：\nGET方式请求URL")]),n._v(" "),_("p",[n._v("即使用配置文件中的location ~ /purge(/.*)")]),n._v(" "),_("p",[n._v("浏览器访问http://192.168.197.169/purge/your/may/path来清除缓存")]),n._v(" "),_("p",[n._v("缓存清除成功。")]),n._v(" "),_("p",[n._v("备注：\n（1）purge是ngx_cache_pure 模块指令\n（2）your/may/path 是要清除的缓存文件URL路径")]),n._v(" "),_("p",[n._v("（2.）测试负载均衡")]),n._v(" "),_("p",[n._v("访问Nginx服务器的ip地址，不停刷新页面浏览到后端的两台Apache网站，证明通过反向代理实现了负载均衡测试成功！！！")]),n._v(" "),_("h2",{attrs:{id:"扩展知识"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#扩展知识"}},[n._v("#")]),n._v(" 扩展知识")]),n._v(" "),_("p",[n._v("如何修改Nginx版本等信息")]),n._v(" "),_("p",[n._v("1、vi /usr/local/src/nginx-1.0.12/src/core/nginx.h   #编译前编辑")]),n._v(" "),_("p",[n._v("#define nginx_version\n#define NGINX_VERSION\n#define NGINX_VER\n#define NGINX_VAR\n修改上面的信息，即可更改nginx显示版本。\n2、vi/usr/local/src/nginx-1.0.12/src/http/ngx_http_special_response.c   #编译前编辑\nstatic u_char ngx_http_error_full_tail[] =\nstatic u_char ngx_http_error_tail[] =\n修改上面的信息为你自己的。\n3、vi/usr/local/src/nginx-1.0.12/src/http/ngx_http_header_filter_module.c   #编译前编辑\nstatic char ngx_http_server_string[]=\n修改上面的信息为你自己的。\n4、编译完成之后，修改/usr/local/nginx/conf目录下面\nfastcgi.conf、fastcgi.conf.default、fastcgi_params、fastcgi_params.default\n这四个文件里面的版本名称\n/usr/local/nginx/sbin/nginx -V  #查看nginx版本号")]),n._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结：")]),n._v(" "),_("p",[n._v("（1.）Nginx的概念、特点、原理（正向、反向代理）、为什么使用Nginx？")]),n._v(" "),_("p",[n._v("（2.）Nginx的安装、")]),n._v(" "),_("p",[n._v("（3.）Nginx的优化、（gzip、cache、负载均衡、健康检查、CPU核数、最大连接数、开启epoll模型、第三方模块、模块优化）")]),n._v(" "),_("p",[n._v("（4.）验证Nginx网页、负载均衡、清除缓存、查看缓存等、")]),n._v(" "),_("p",[n._v("（5.）Nginx不能动态加载模块，需要提前编译时安装！！！")]),n._v(" "),_("p",[_("a",{attrs:{href:"https://me.csdn.net/weixin_45509582",target:"_blank",rel:"noopener noreferrer"}},[n._v("原作者博客CSDN"),_("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);