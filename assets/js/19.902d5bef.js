(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{544:function(t,n,e){"use strict";e.r(n);var a=e(8),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"钉钉报警插件已打包在镜像-不想麻烦的可以直接pull"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#钉钉报警插件已打包在镜像-不想麻烦的可以直接pull"}},[t._v("#")]),t._v(" 钉钉报警插件已打包在镜像，不想麻烦的可以直接pull")]),t._v(" "),e("h2",{attrs:{id:"其他两个平台实时同步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他两个平台实时同步"}},[t._v("#")]),t._v(" 其他两个平台实时同步")]),t._v(" "),e("ul",[e("li",[t._v("个人Blog：https://alexcld.com")]),t._v(" "),e("li",[t._v("CSDN：https://blog.csdn.net/weixin_45509582")])]),t._v(" "),e("p",[t._v("加密token")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("echo -n 'token' | base64\n")])])]),e("p",[t._v("alertGo-deployment.yaml")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('apiVersion: v1\nkind: Secret\nmetadata:\n  name: dd-token\n  namespace: ops\ntype: Opaque\ndata:\n  token: \'加密后的token\'\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: alertgo\n  namespace: ops\nspec:\n  selector:\n    matchLabels:\n      app: alertgo\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: alertgo\n    spec:\n      containers:\n        - name: alertgo\n          image: alexcld/alertgo:v3\n          env:\n          - name: token\n            valueFrom:\n              secretKeyRef:\n                name: dd-token\n                key: token\n          ports:\n            - containerPort: 8088\n          livenessProbe:\n            httpGet:\n              path: /\n              port: 8088\n            initialDelaySeconds: 30\n            periodSeconds: 10\n            successThreshold: 1\n            failureThreshold: 3\n            timeoutSeconds: 1\n          readinessProbe:\n            httpGet:\n              path: /\n              port: 8088\n            initialDelaySeconds: 30\n            periodSeconds: 10\n            successThreshold: 1\n            failureThreshold: 3\n            timeoutSeconds: 1\n          lifecycle:\n            preStop:\n              exec:\n                command: ["/bin/bash","-c","sleep 20"]\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: alertgo\n  namespace: ops\nspec:\n  selector:\n    app: alertgo\n  ports:\n    - port: 80\n      targetPort: 8088\n\n')])])]),e("p",[t._v("kubectl apply -f alertGo-deployment.yaml")]),t._v(" "),e("h2",{attrs:{id:"修改alertmanager-configmap-yaml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改alertmanager-configmap-yaml"}},[t._v("#")]),t._v(" 修改alertmanager-configmap.yaml")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/a516c430f9564610aae3e311fb999fd0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUwOTU4Mg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("webhook_configs:\n      - url: 'http://clusterIP/Alert'\n        send_resolved: true\n")])])]),e("p",[t._v("至此完成")]),t._v(" "),e("h1",{attrs:{id:"go环境部署及打包钉钉报警插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#go环境部署及打包钉钉报警插件"}},[t._v("#")]),t._v(" go环境部署及打包钉钉报警插件")]),t._v(" "),e("h2",{attrs:{id:"其他两个平台实时同步-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他两个平台实时同步-2"}},[t._v("#")]),t._v(" 其他两个平台实时同步")]),t._v(" "),e("ul",[e("li",[t._v("个人Blog：https://alexcld.com")]),t._v(" "),e("li",[t._v("CSDN：https://blog.csdn.net/weixin_45509582")])]),t._v(" "),e("h2",{attrs:{id:"linux安装go1-13-10"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux安装go1-13-10"}},[t._v("#")]),t._v(" linux安装go1.13.10")]),t._v(" "),e("p",[t._v("下载解压")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("cd /opt && wget https://golang.org/dl/go1.13.10.linux-amd64.tar.gz\n#解压至/usr/local\ntar -zxvf go1.13.10.linux-amd64.tar.gz\n")])])]),e("p",[t._v("创建/opt/gocode/{src,bin,pkg}，用于设置GOPATH为/opt/gocode")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mkdir -p /opt/gocode/{src,bin,pkg}\n\n/opt/gocode/\n├── bin\n├── pkg\n└── src\n")])])]),e("p",[t._v("修改/etc/profile系统环境变量文件，写入GOPATH信息以及go sdk路径")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export GOROOT=/opt/go           #Golang源代码目录，安装目录\nexport GOPATH=/opt/gocode        #Golang项目代码目录\nexport PATH=$GOROOT/bin:$PATH    #Linux环境变量\nexport GOBIN=$GOPATH/bin        #go install后生成的可执行命令存放路径\n# 保存退出后source一下\nsource /etc/profile\n")])])]),e("p",[t._v("执行go version")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[root@localhost gocode]# go version\ngo version go1.13.10 linux/amd64\n")])])]),e("h2",{attrs:{id:"运行程序并打包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行程序并打包"}},[t._v("#")]),t._v(" 运行程序并打包")]),t._v(" "),e("h3",{attrs:{id:"安装gin-web框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装gin-web框架"}},[t._v("#")]),t._v(" 安装gin web框架")]),t._v(" "),e("p",[t._v("爬过梯子的可以直接安装，不再赘述如何爬梯子，如果没有爬梯子的话 需要设置下GOPROXY")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("golang 1.13 可以直接执行：\n\n七牛云\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.cn,direct\n\n阿里云\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct\n")])])]),e("p",[t._v("安装gin依赖")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("go get -u github.com/gin-gonic/gin\n")])])]),e("p",[t._v("创建go文件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mkdir -p $GOPATH/alertgo && cd $GOPATH/alertgo\ntouch alertGo.go\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('package main\n\nimport (\n\t"bytes"\n\t"encoding/json"\n\t"fmt"\n\t"net/http"\n\t"os"\n\t"strings"\n\t"time"\n\n\t"github.com/gin-gonic/gin"\n)\n\n//const (\n//\twebHook_Alert = "https://oapi.dingtalk.com/robot/send?access_token=724402cd85e7e80aa5bbbb7d7a89c74db6a3a8bd8fac4c91923ed3f906664ba4"\n//)\ntype Message struct {\n\tMsgType string `json:"msgtype"`\n\tText    struct {\n\t\tContent               string `json:"content"`\n\t\tMentioned_list        string `json:"mentioned_list"`\n\t\tMentioned_mobile_list string `json:"mentioned_mobile_list"`\n\t} `json:"text"`\n}\ntype Alert struct {\n\tLabels      map[string]string `json:"labels"`\n\tAnnotations map[string]string `json:annotations`\n\tStartsAt    time.Time         `json:"startsAt"`\n\tEndsAt      time.Time         `json:"endsAt"`\n}\n\n//通知消息结构体\ntype Notification struct {\n\tVersion           string            `json:"version"`\n\tGroupKey          string            `json:"groupKey"`\n\tStatus            string            `json:"status"`\n\tReceiver          string            `json:receiver`\n\tGroupLabels       map[string]string `json:groupLabels`\n\tCommonLabels      map[string]string `json:commonLabels`\n\tCommonAnnotations map[string]string `json:commonAnnotations`\n\tExternalURL       string            `json:externalURL`\n\tAlerts            []Alert           `json:alerts`\n}\n\n//获取报警信息\nfunc getAlertInfo(notification Notification) string {\n\tvar m Message\n\tm.MsgType = "text"\n\t//告警消息\n\t//重新定义报警消息\n\tvar newbuffer bytes.Buffer\n\t//定义恢复消息\n\tvar recoverbuffer bytes.Buffer\n\tfmt.Println(notification)\n\tfmt.Println(notification.Status)\n\tif notification.Status == "resolved" {\n\t\tfor _, alert := range notification.Alerts {\n\t\t\trecoverbuffer.WriteString(fmt.Sprintf("状态已经恢复!!!!\\n"))\n\t\t\trecoverbuffer.WriteString(fmt.Sprintf(" **项目: 恢复时间:**%s\\n\\n", alert.StartsAt.Add(8*time.Hour).Format("2006-01-02 15:04:05")))\n\t\t\trecoverbuffer.WriteString(fmt.Sprintf("项目: 告警主题: %s \\n", alert.Annotations["summary"]))\n\n\t\t}\n\n\t} else {\n\t\tfor _, alert := range notification.Alerts {\n\t\t\tnewbuffer.WriteString(fmt.Sprintf("==============Start============ \\n"))\n\t\t\tnewbuffer.WriteString(fmt.Sprintf("项目: 告警程序：prometheus_alert_email \\n"))\n\t\t\tnewbuffer.WriteString(fmt.Sprintf("项目: 告警级别: %s \\n", alert.Labels["severity"]))\n\t\t\tnewbuffer.WriteString(fmt.Sprintf("项目: 告警类型: %s \\n", alert.Labels["alertname"]))\n\t\t\tnewbuffer.WriteString(fmt.Sprintf("项目: 故障主机: %s \\n", alert.Labels["instance"]))\n\t\t\tnewbuffer.WriteString(fmt.Sprintf("项目: 告警主题: %s \\n", alert.Annotations["summary"]))\n\t\t\tnewbuffer.WriteString(fmt.Sprintf("项目: 告警详情: %s \\n", alert.Annotations["description"]))\n\t\t\tnewbuffer.WriteString(fmt.Sprintf(" **项目: 开始时间:**%s\\n\\n", alert.StartsAt.Add(8*time.Hour).Format("2006-01-02 15:04:05")))\n\t\t\tnewbuffer.WriteString(fmt.Sprintf("==============End============ \\n"))\n\t\t}\n\t}\n\n\tif notification.Status == "resolved" {\n\t\tm.Text.Content = recoverbuffer.String()\n\t} else {\n\t\tm.Text.Content = newbuffer.String()\n\t}\n\tjsons, err := json.Marshal(m)\n\tif err != nil {\n\t\tfmt.Println("解析发送钉钉的信息有问题!!!!")\n\t}\n\tresp := string(jsons)\n\treturn resp\n}\n\n//钉钉报警\nfunc SendAlertDingMsg(msg string) {\n\tdefer func() {\n\t\tif err := recover(); err != nil {\n\t\t\tfmt.Println("err")\n\t\t}\n\t}()\n\ttoken := os.Getenv("token")\n\twebHook_Alert := "https://oapi.dingtalk.com/robot/send?access_token=" + token\n\tfmt.Println("开始发送报警消息!!!")\n\tfmt.Println(webHook_Alert)\n\t//content := `{"msgtype": "text",\n\t//\t"text": {"content": "` + msg + `"}\n\t//}`\n\n\t//创建一个请求\n\treq, err := http.NewRequest("POST", webHook_Alert, strings.NewReader(msg))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tfmt.Println("钉钉报警请求异常")\n\t}\n\tclient := &http.Client{}\n\t//设置请求头\n\treq.Header.Set("Content-Type", "application/json; charset=utf-8")\n\t//发送请求\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\t// handle error\n\t\tfmt.Println(err)\n\t\tfmt.Println("顶顶报发送异常!!!")\n\t}\n\tdefer resp.Body.Close()\n}\nfunc AlertInfo(c *gin.Context) {\n\tvar notification Notification\n\tfmt.Println("接收到的信息是....")\n\tfmt.Println(notification)\n\terr := c.BindJSON(&notification)\n\tfmt.Printf("%#v", notification)\n\tif err != nil {\n\t\tfmt.Println("绑定信息错误!!!")\n\t\tc.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})\n\t\treturn\n\t} else {\n\t\tfmt.Println("绑定信息成功")\n\t}\n\tfmt.Println("绑定信息成功!!!")\n\tmsg := getAlertInfo(notification)\n\tfmt.Println("打印的信息是.....")\n\tfmt.Println(msg)\n\tSendAlertDingMsg(msg)\n\n}\nfunc main() {\n\tt := gin.Default()\n\tt.POST("/Alert", AlertInfo)\n\tt.GET("/", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, `<h1>关于alertmanager实现钉钉报警的方法V6！！！</h1>`+"\\n新增了报警恢复机制！！！")\n\t})\n\tt.Run(":8088")\n}\n')])])]),e("p",[t._v("最后将go文件打包为linux二进制可运行程序")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("go build alertGo.go\n")])])]),e("p",[t._v("运行alertGo程序")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("###赋权\nchmod 775 alertGo\n###后台运行\nnohup /root/prometheus/alertGo/alertGo > alertGo.log 2>&1 &\n###查看端口进程\nlsof -i:8088\n###查看日志\ntail -f alertGo.log \n")])])]),e("h2",{attrs:{id:"修改alertmanager-configmap-yaml-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改alertmanager-configmap-yaml-2"}},[t._v("#")]),t._v(" 修改alertmanager-configmap.yaml")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/a516c430f9564610aae3e311fb999fd0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUwOTU4Mg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("webhook_configs:\n      - url: 'http://xxxxx:8088/Alert'\n        send_resolved: true\n")])])]),e("p",[t._v("热更新prometheus")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("kubectl apply -f alertmanager-configmap.yaml\n###alertmanager clusterIP\ncurl -X POST http://10.1.229.17/-/reload  \n")])])]),e("p",[t._v("然后触发报警，钉钉就可以正常收取了，\n"),e("img",{attrs:{src:"https://img-blog.csdnimg.cn/dfbbf2efe4b446c1bc71a20a54855180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUwOTU4Mg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("在此感谢"),e("a",{attrs:{href:"https://blog.51cto.com/luoguoling",target:"_blank",rel:"noopener noreferrer"}},[t._v("大佬"),e("OutboundLink")],1),t._v("的代码")])])}),[],!1,null,null,null);n.default=r.exports}}]);