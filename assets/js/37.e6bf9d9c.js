(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{562:function(e,t,n){"use strict";n.r(t);var s=n(8),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"云服务器上搭建kubernetes集群"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#云服务器上搭建kubernetes集群"}},[e._v("#")]),e._v(" 云服务器上搭建kubernetes集群")]),e._v(" "),n("h3",{attrs:{id:"使用的虚机百度云bcc-centos7-5-2核4g"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用的虚机百度云bcc-centos7-5-2核4g"}},[e._v("#")]),e._v(" 使用的虚机百度云BCC，centos7.5 ，2核4G")]),e._v(" "),n("p",[e._v("yum源百度云官方自带yum源，腾讯，阿里云自带yum源都可参考该文档")]),e._v(" "),n("p",[e._v("搭建k8，一共三台虚机：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("master 192.168.0.8\t\tmaster跟etcd共用一台\nminion1 192.168.0.9\nminion2 192.168.0.10\n")])])]),n("p",[e._v("百度云虚机自带yum源就可以下载\n三台虚机都需要安装")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@master ~]# yum -y install kubernetes etcd flannel ntp\n[root@minion1 ~]# yum -y install kubernetes etcd flannel ntp\n[root@minion2 ~]# yum -y install kubernetes etcd flannel ntp\n")])])]),n("p",[e._v("关闭防火墙 三台同样需要关闭     注：若是生产环境不必关闭，写firewalld rule")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@master ~]# systemctl stop firewalld && systemctl disable firewalld && systemctl status firewalld\n[root@minion1~]# systemctl stop firewalld && systemctl disable firewalld && systemctl status firewalld\n[root@minion2~]# systemctl stop firewalld && systemctl disable firewalld && systemctl status firewalld\n")])])]),n("p",[e._v("在hosts文件添加以下内容，执行一台，剩余拷贝就ok")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@master ~]# vim /etc/hosts\n192.168.0.8 master\n192.168.0.8 etcd\n192.168.0.9 minion1\n192.168.0.10 minion2\n[root@master ~]# scp /etc/hosts 192.168.0.9:/etc/\n[root@master ~]# scp /etc/hosts 192.168.0.10:/etc/\n")])])]),n("p",[e._v("在master上配置etcd")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@master ~]# vim /etc/etcd/etcd.conf \n改：2 ETCD NAME=default\n为：2ETCD_NAME="etcd"\nETCD_DATA_DIR="/var/lib/etcd/default.etcd"\n改：9 ETCD_LISTEN_CLIENT_URLS="http://localhost:2379"\n为：ETCD_LISTEN_CLIENT_URLS="http://localhost：2379,http://192.168.0.8:2379"\n改：20 ETCD_ADVERTISE_CLIENT_URLS="http://localhost:2379"\n为：ETCD_ADVERTISE_CLIENT_URLS="http://192.168.0.8:2379"\n注释：    advertise [aedvetarz] 做广告，做宣传；通告，通知\n/etc/etcd/etcd.conf 配置文件含意如下：\nETCD_NAME="etcd"\netcd节点名称，如果etcd 集群只有一台etcd，这一项可以注释不用配置，默认名称为\t\t\tdefault，这\n个名宇后面会用到。\nETCD_DATA_DIR="/var/lib/etcd/default.etcd"\netcd 存储数据的目录\nETCD_LISTEN_CLIENT_URLS="http://localhost:2379,http://192.168.1.63:2379"\netcd 对外服务监听地址，一般指定2379端口，如果为0.0.0.0将会监听所有接口\nETCD_ARGS=""\n')])])]),n("p",[e._v("需要额外添加的参数，可以自己添加，etcd 的所有参数可以通过etcd-h查看。\n"),n("strong",[e._v("启动服务")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@master ~]# systemctl start etcd\n[root@master ~]# systemctl status etcd\n[root@master ~]# systemctl enable etcd\n[root@master ~]# netstat -anptu | grep 2379\ntcp        0      0 127.0.0.1:2379          0.0.0.0:*               LISTEN      2963/etcd           \ntcp        0      0 192.168.0.8:2379        0.0.0.0:*               LISTEN      2963/etcd           \ntcp        0      0 192.168.0.8:38866       192.168.0.8:2379        ESTABLISHED 2963/etcd           \ntcp        0      0 127.0.0.1:2379          127.0.0.1:45804         ESTABLISHED 2963/etcd           \ntcp        0      0 192.168.0.8:2379        192.168.0.8:38866       ESTABLISHED 2963/etcd           \ntcp        0      0 127.0.0.1:45804         127.0.0.1:2379          ESTABLISHED 2963/etcd           \n")])])]),n("p",[e._v("检查etcd集群列表，这里只有一台")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@master ~]# etcdctl member list\n8e9e05c52164694d: name=etcd peerURLs=http://localhost:2380 clientURLs=http://192.168.0.8:2379 isLeader=true\n")])])]),n("p",[e._v("在master配置master\n修改kubernetets配置文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@master ~]# vim /etc/kubernetes/config \n改：KUBE_MASTER="--master=http://127.0.0.1:8080"\n为：KUBE_MASTER="--master=http://192.168.0.8:8080"\n')])])]),n("p",[e._v("修改apiserver配置文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@master ~]# vim /etc/kubernetes/apiserver\n[root@xuegod63 ~]# vim /etc/kubernetes/apiserver\n改：8 KUBE_API_ADDRESS="--insecure-bind-address=127.0.0.1"\n为：8 KUBE_API_ADDRESS="--insecure-bind-address=0.0.0.0\n改：17 KUBE_ETCD_SERVERS="--etcd-servers=http://127.0.0.1:2379"\n为：KUBE_ETCD_SERVERS="--etcd-servers=http://192.168.0.8:2379"\n改23行：\nKUBE_ADMISSION_CONTROL="--admission-control=NamespaceLifecycle,NamespaceExist\ns,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota"\n为：KUBE_ADMISSION_CONTROL="--admission-control=AlwaysAdmit" #这里必须配置\n正确\n')])])]),n("p",[e._v("配置kube-controller-manager配置文件\n默认不需要改动")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@master ~]# cat /etc/kubernetes/controller-manager \n")])])]),n("p",[e._v("配置kube-scheduler配置文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@master ~]# vim /etc/kubernetes/scheduler \n改：KUBE_SCHEDULER_ARGS=" "\n为：KUBE_SCHEDULER_ARGS="0.0.0.0"\n')])])]),n("p",[e._v("设置etcd网络")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@master ~]# etcdctl set /k8s/network/config \'{"Network":"10.255.0.0/16"}\'   //用于存储flanneld网络信息\n[root@master ~]# etcdctl get /k8s/network/config      //查看\n{"Network":"10.255.0.0/16"}\n')])])]),n("p",[e._v("配置flanneld服务")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@master ~]# vim /etc/sysconfig/flanneld \n改：4FLANNEL_ETCD_ENDPOINTS="http://127.0.0.1:2379"\n为：4FLANNEL_ETCD_ENDPOINTS="http://192.168.0.8:2379"\n改:8 FLANNEL_ETCD_PREFIX="/atomic.io/network"\n为：8 FLANNEL_ETCD_PREFIX="/k8s/network"\n#注其中/k8s/network 与上面 etcd 中的 Network 对应\n改：11 #FLANNEL_OPTIONS=""\n为：11 FLANNEL_OPTIONS="--iface=eth0" #指定 通信的物理网卡\n[root@master ~]# systemctl restart flanneld.service \n[root@master ~]# systemctl status flanneld.service \n[root@master ~]# cat /run/flannel/subnet.env  //查看/run/flannel/subnet.env 子网信息\nFLANNEL_NETWORK=10.255.0.0/16\nFLANNEL_SUBNET=10.255.6.1/24\nFLANNEL_MTU=1472\nFLANNEL_IPMASQ=false\n')])])]),n("p",[e._v("之后会有一个脚本姜subnet.env转写程一个docker的环境变量文件/run/flannel/docker\ndocker0的地址是由 /run/flannel/subnet.env 的FLANNEL_SUBENT参数决定的")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@master ~]# cat /run/flannel/docker \nDOCKER_OPT_BIP="--bip=10.255.6.1/24"\nDOCKER_OPT_IPMASQ="--ip-masq=true"\nDOCKER_OPT_MTU="--mtu=1472"\nDOCKER_NETWORK_OPTIONS=" --bip=10.255.6.1/24 --ip-masq=true --mtu=1472"\n')])])]),n("p",[e._v("启动master上的4个服务")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@master ~]# systemctl restart kube-apiserver kube-controller-manager kube-scheduler flanneld\n[root@master ~]# systemctl status kube-apiserver kube-controller-manager kube-scheduler flanneld\n[root@master ~]# systemctl enable kube-apiserver kube-controller-manager kube-scheduler flanneld\n")])])]),n("p",[n("strong",[e._v("到此master和etcd节点配置成功")])]),e._v(" "),n("p",[e._v("配置minion1,采用flannel方式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@minion1 ~]# vim /etc/sysconfig/flanneld \n改：4FLANNEL_ETCD_ENDPOINTS="http://127.0.0.1:2379"\n为：4FLANNEL_ETCD_ENDPOINTS="http://192.168.0.8:2379"\n改:8 FLANNEL_ETCD_PREFIX="/atomic.io/network"\n为：8 FLANNEL_ETCD_PREFIX="/k8s/network"\n#注其中/k8s/network 与上面 etcd 中的 Network 对应\n改：11 #FLANNEL_OPTIONS=""\n为：11 FLANNEL_OPTIONS="--iface=eth0" #指定 通信的物理网卡\n')])])]),n("p",[e._v("配置minion1上的master地址和kube-proxy")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@minion1 ~]# vim /etc/kubernetes/config \n改：KUBE_MASTER="--master=http://127.0.01:8080"\n为：KUBE_MASTER="--master=http://192.168.0.8:8080"\n')])])]),n("p",[e._v("kube-proxy默认不需要改动")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@minion1 ~]# grep -v '^#' /etc/kubernetes/proxy \nKUBE_PROXY_ARGS=\"\"\n")])])]),n("p",[e._v("配置minion1 kubelet")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@minion1 ~]# vim /etc/kubernetes/kubelet \n改：5 KUBELET_ADDRESS="--address=127.0.0.1"\n为：5KUBELET_ADDRESS="--address=0.0.0.0" #默认只监听127.0.0.1，要改成：0.0.0.0，\n因为后期要使用kubectl 远程连接到kubelet 服务上，来查看 pod 及 pod 中容器的状态。如果是 127\n就无法远程连接kubelet服务。\n改：11 KUBELET_HOSTNAME="--hostname-override=127.0.0.1"\n为：11 KUBELET_HOSTNAME="_-hostname-override=minion1" # minion 的主机名，设置\n成和本主机机名一样，便于识别。\n改：14 KUBELET_API_SERVER="--api-servers=http://127.0.0.1:8080"\n为：14 KUBELET_API_SERVER="--api-servers=http://192.168.0.8:8080" #批定 apiserver\n的地址\n')])])]),n("p",[e._v("启动minion1服务")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@minion1 ~]# systemctl restart flanneld kube-proxy kubelet docker\n[root@minion1 ~]# systemctl enable flanneld kube-proxy kubelet docker\n[root@minion1 ~]# systemctl status flanneld kube-proxy kubelet docker\n查看\n[root@minion1 ~]# ifconfig\ndocker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 10.255.90.1  netmask 255.255.255.0  broadcast 0.0.0.0\n        ether 02:42:0c:ce:9d:7d  txqueuelen 0  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nflannel0: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1472\n        inet 10.255.90.0  netmask 255.255.0.0  destination 10.255.90.0\n        inet6 fe80::6062:c456:9093:278b  prefixlen 64  scopeid 0x20<link>\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 3  bytes 144 (144.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n")])])]),n("p",[e._v("查看kube-proxy")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@minion1 ~]# netstat -antup | grep proxy\ntcp        0      0 127.0.0.1:10249         0.0.0.0:*               LISTEN      3242/kube-proxy     \ntcp        0      0 192.168.0.9:53976       192.168.0.8:8080        ESTABLISHED 3242/kube-proxy     \ntcp        0      0 192.168.0.9:53974       192.168.0.8:8080        ESTABLISHED 3242/kube-proxy  \n")])])]),n("p",[e._v("配置minion2,采用flannel方式，和minion1配置一样\n这里 直接将minion1的的配置文件拷贝到minion2了")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@minion1 ~]# scp /etc/sysconfig/flanneld 189.168.0.10:/etc/sysconfig/\n再次确认拷贝正确\n[root@minion2 ~]# grep -v \'^#\' /etc/sysconfig/flanneld \n\nFLANNEL_ETCD_ENDPOINTS="http://192.168.0.8:2379"\n\nFLANNEL_ETCD_PREFIX="/k8s/network"\n\nFLANNEL_OPTIONS="--iface=eth0"\n[root@minion2 ~]# systemctl start flanneld.service \n[root@minion2 ~]# ifconfig \nflannel0: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1472\n        inet 10.255.50.0  netmask 255.255.0.0  destination 10.255.50.0\n        inet6 fe80::435b:45bf:df6b:58c  prefixlen 64  scopeid 0x20<link>\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 2  bytes 96 (96.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n')])])]),n("p",[e._v("配置minion2上的地址和kube-proxy\n这里也直接拷贝minion1的配置文件了")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@minion1 ~]# scp /etc/kubernetes/config 192.168.0.10:/etc/kubernetes/\n[root@minion1 ~]# scp /etc/kubernetes/proxy 192.168.0.10:/etc/kubernetes/\n[root@minion2 ~]# systemctl start kube-proxy\n[root@minion2 ~]# netstat -anptu | grep proxy\ntcp        0      0 127.0.0.1:10249         0.0.0.0:*               LISTEN      29942/kube-proxy    \ntcp        0      0 192.168.0.10:59170      192.168.0.8:8080        ESTABLISHED 29942/kube-proxy    \ntcp        0      0 192.168.0.10:59168      192.168.0.8:8080        ESTABLISHED 29942/kube-proxy    \ntcp        0      0 192.168.0.10:59166      192.168.0.8:8080        ESTABLISHED 29942/kube-proxy    \n")])])]),n("p",[e._v("配置minion2 kubelet")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@minion1 ~]# scp /etc/kubernetes/kubelet 192.168.0.10:/etc/kubernetes/\nroot@192.168.0.10 password: \nkubelet                                                                                               100%  613     1.6MB/s   00:00  \n[root@minion2 ~]# vim /etc/kubernetes/kubelet \n改：KUBELET_HOSTNAME="--hostname-override=minion1"\n为：KUBELET_HOSTNAME="--hostname-override=minion2"\n[root@minion2 ~]# systemctl start kubelet\n[root@minion2 ~]# netstat -antup | grep 8080    //查看：已建立连接\ntcp        0      0 192.168.0.10:59216      192.168.0.8:8080        TIME_WAIT   -                   \ntcp        0      0 192.168.0.10:59168      192.168.0.8:8080        ESTABLISHED 29942/kube-proxy    \ntcp        0      0 192.168.0.10:59212      192.168.0.8:8080        ESTABLISHED 32339/kubelet       \ntcp        0      0 192.168.0.10:59214      192.168.0.8:8080        ESTABLISHED 32339/kubelet       \ntcp        0      0 192.168.0.10:59218      192.168.0.8:8080        ESTABLISHED 32339/kubelet       \ntcp        0      0 192.168.0.10:59166      192.168.0.8:8080        ESTABLISHED 29942/kube-proxy    \ntcp        0      0 192.168.0.10:59210      192.168.0.8:8080        ESTABLISHED 32339/kubelet       \n[root@minion2 ~]# systemctl restart flanneld kube-proxy kubelet docker\n[root@minion2 ~]# systemctl enable flanneld kube-proxy kubelet docker\n[root@minion2 ~]# systemctl status flanneld kube-proxy kubelet docker\n')])])]),n("p",[e._v("ifconfig查看docker0 IP  minion1和minion2是不一样的")]),e._v(" "),n("p",[e._v("到master主机上查看集群运行状态")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@master ~]# kubectl get nodes\nNAME      STATUS    AGE\nminion1   Ready     26m\nminion2   Ready     7m\n")])])]),n("p",[n("strong",[e._v("到此整个集群搭建完成")])]),e._v(" "),n("blockquote",[n("p",[e._v("总结：kubernetes 每个节点需要启动的服务和开放端口号\n在本实验中kubernetes4个结点一共需要启动13个服务，开6个端口号。\n详情如下：~\netcd:一共1个服务 ，通讯使用 2379 端口\n启动服务\n[root@master（etcd）~]#systemctl restart etcd\nmaster:一共4个服务，通讯使用 8080端口\n[root@master（etcd）--]# systemctl restart kube-apiserver kube-controller-manager\nkube-scheduler flanneld\nminion1:一共4个服务\nkubeproxy 监控听端口号是 10249 , kubelet 监听端口 10248、10250、10255 三个端口\n[root@minion1 --]# systemctl restart flanneld kube-proxy kubelet docker\nminion2:一共4个服务\n[root@minion2 ~]# systemctl restart flanneld kube-proxy kubelet docker")])]),e._v(" "),n("h3",{attrs:{id:"点击前往作者csdn博客"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#点击前往作者csdn博客"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"https://me.csdn.net/weixin_45509582",target:"_blank",rel:"noopener noreferrer"}},[e._v("点击前往作者CSDN博客"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);